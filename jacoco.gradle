apply plugin: 'jacoco'
jacoco {
    // You might need to change this to 0.8.5 if you see an exit value like "134"
    toolVersion = "0.8.6"
}
def coverageSourceDirs = [
        'src/main/java',
        'src/debug/java'
]
def excludes = [
        '**/R.class',
        '**/R$*.class',
        '**/*$ViewInjector*.*',
        '**/*$ViewBinder*.*',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*RealmProxy.*',
        '**/*ColumnInfo.*',
        '**/*RealmModule*.*',
        '**/AutoValue_*.*',
        '**/Dagger*.*',
        '**/*Module_Provide*Factory.*',
        '**/*_Factory.*',
        '**/*_MembersInjector.*',
        '**/*_LifecycleAdapter.*',
        '**/models/**'
]
def javaClasses = fileTree(
        dir      : 'build/intermediates/javac/debug/classes/com/example',
        excludes : excludes
)
def kotlinClasses = fileTree(
        dir      : 'build/tmp/kotlin-classes/debug/com/example',
        excludes : excludes
)
tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}
task jacocoTestReport(type : JacocoReport, dependsOn : ['testDebugUnitTest']) {
    group       = 'Reporting'
    description = 'Generate JaCoCo coverage reports'
    reports {
        xml.enabled  = true
        html.enabled = true
    }
    getClassDirectories().setFrom(files([javaClasses, kotlinClasses]))
    getSourceDirectories().setFrom(files(coverageSourceDirs))
    getExecutionData().setFrom(fileTree(
            dir     : "$buildDir",
            include : [ 'jacoco/testDebugUnitTest.exec', 'outputs/code_coverage/debugAndroidTest/connected/*coverage.ec' ]
    ))
    doFirst {
        files([javaClasses, kotlinClasses]).getFiles().each { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}
task jacocoTestReportLocal(type : JacocoReport, dependsOn : ['testDebugUnitTest', 'createDebugCoverageReport']) {
    group       = 'Reporting'
    description = 'Generate JaCoCo coverage reports'
    reports {
        xml.enabled  = true
        html.enabled = true
    }
    getClassDirectories().setFrom(files([javaClasses, kotlinClasses]))
    getSourceDirectories().setFrom(files(coverageSourceDirs))
    getExecutionData().setFrom(fileTree(
            dir     : "$buildDir",
            include : [ 'jacoco/testDebugUnitTest.exec', 'outputs/code_coverage/debugAndroidTest/connected/*coverage.ec' ]
    ))
    doFirst {
        files([javaClasses, kotlinClasses]).getFiles().each { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}